(function () {
    function i(g, e) {
        function p(k, f) {
            return function () {
                return k.apply(f, arguments)
            }
        }

        var o;
        e = e || {};
        this.trackingClick = !1;
        this.trackingClickStart = 0;
        this.targetElement = null;
        this.lastTouchIdentifier = this.touchStartY = this.touchStartX = 0;
        this.touchBoundary = e.touchBoundary || 10;
        this.layer = g;
        this.tapDelay = e.tapDelay || 200;
        this.tapTimeout = e.tapTimeout || 700;
        if (!i.notNeeded(g)) {
            for (var n = "onMouse onClick onTouchStart onTouchMove onTouchEnd onTouchCancel".split(" "), m = 0,
                     l = n.length; m < l; m++) {
                this[n[m]] = p(this[n[m]], this)
            }
            d && (g.addEventListener("mouseover", this.onMouse, !0), g.addEventListener("mousedown", this.onMouse, !0), g.addEventListener("mouseup", this.onMouse, !0));
            g.addEventListener("click", this.onClick, !0);
            g.addEventListener("touchstart", this.onTouchStart, !1);
            g.addEventListener("touchmove", this.onTouchMove, !1);
            g.addEventListener("touchend", this.onTouchEnd, !1);
            g.addEventListener("touchcancel", this.onTouchCancel, !1);
            Event.prototype.stopImmediatePropagation || (g.removeEventListener = function (f, r, q) {
                var k = Node.prototype.removeEventListener;
                "click" === f ? k.call(g, f, r.hijacked || r, q) : k.call(g, f, r, q)
            }, g.addEventListener = function (f, r, q) {
                var k = Node.prototype.addEventListener;
                "click" === f ? k.call(g, f, r.hijacked || (r.hijacked = function (s) {
                        s.propagationStopped || r(s)
                    }), q) : k.call(g, f, r, q)
            });
            "function" === typeof g.onclick && (o = g.onclick, g.addEventListener("click", function (f) {
                o(f)
            }, !1), g.onclick = null)
        }
    }

    var c = 0 <= navigator.userAgent.indexOf("Windows Phone"), d = 0 < navigator.userAgent.indexOf("Android") && !c,
        h = /iP(ad|hone|od)/.test(navigator.userAgent) && !c, b = h && /OS 4_\d(_\d)?/.test(navigator.userAgent),
        a = h && /OS [6-7]_\d/.test(navigator.userAgent), j = 0 < navigator.userAgent.indexOf("BB10");
    i.prototype.needsClick = function (e) {
        switch (e.nodeName.toLowerCase()) {
            case"button":
            case"select":
            case"textarea":
                if (e.disabled) {
                    return !0
                }
                break;
            case"input":
                if (h && "file" === e.type || e.disabled) {
                    return !0
                }
                break;
            case"label":
            case"iframe":
            case"video":
                return !0
        }
        return /\bneedsclick\b/.test(e.className)
    };
    i.prototype.needsFocus = function (e) {
        switch (e.nodeName.toLowerCase()) {
            case"textarea":
                return !0;
            case"select":
                return !d;
            case"input":
                switch (e.type) {
                    case"button":
                    case"checkbox":
                    case"file":
                    case"image":
                    case"radio":
                    case"submit":
                        return !1
                }
                return !e.disabled && !e.readOnly;
            default:
                return /\bneedsfocus\b/.test(e.className)
        }
    };
    i.prototype.sendClick = function (f, e) {
        var k, g;
        document.activeElement && document.activeElement !== f && document.activeElement.blur();
        g = e.changedTouches[0];
        k = document.createEvent("MouseEvents");
        k.initMouseEvent(this.determineEventType(f), !0, !0, window, 1, g.screenX, g.screenY, g.clientX, g.clientY, !1, !1, !1, !1, 0, null);
        k.forwardedTouchEvent = !0;
        f.dispatchEvent(k)
    };
    i.prototype.determineEventType = function (e) {
        return d && "select" === e.tagName.toLowerCase() ? "mousedown" : "click"
    };
    i.prototype.focus = function (f) {
        var e;
        h && f.setSelectionRange && 0 !== f.type.indexOf("date") && "time" !== f.type && "month" !== f.type ? (e = f.value.length, f.setSelectionRange(e, e)) : f.focus()
    };
    i.prototype.updateScrollParent = function (f) {
        var e, g;
        e = f.fastClickScrollParent;
        if (!e || !e.contains(f)) {
            g = f;
            do {
                if (g.scrollHeight > g.offsetHeight) {
                    e = g;
                    f.fastClickScrollParent = g;
                    break
                }
                g = g.parentElement
            } while (g)
        }
        e && (e.fastClickLastScrollTop = e.scrollTop)
    };
    i.prototype.getTargetElementFromEventTarget = function (e) {
        return e.nodeType === Node.TEXT_NODE ? e.parentNode : e
    };
    i.prototype.onTouchStart = function (f) {
        var e, k, g;
        if (1 < f.targetTouches.length) {
            return !0
        }
        e = this.getTargetElementFromEventTarget(f.target);
        k = f.targetTouches[0];
        if (h) {
            g = window.getSelection();
            if (g.rangeCount && !g.isCollapsed) {
                return !0
            }
            if (!b) {
                if (k.identifier && k.identifier === this.lastTouchIdentifier) {
                    return f.preventDefault(), !1
                }
                this.lastTouchIdentifier = k.identifier;
                this.updateScrollParent(e)
            }
        }
        this.trackingClick = !0;
        this.trackingClickStart = f.timeStamp;
        this.targetElement = e;
        this.touchStartX = k.pageX;
        this.touchStartY = k.pageY;
        f.timeStamp - this.lastClickTime < this.tapDelay && f.preventDefault();
        return !0
    };
    i.prototype.touchHasMoved = function (f) {
        f = f.changedTouches[0];
        var e = this.touchBoundary;
        return Math.abs(f.pageX - this.touchStartX) > e || Math.abs(f.pageY - this.touchStartY) > e ? !0 : !1
    };
    i.prototype.onTouchMove = function (e) {
        if (!this.trackingClick) {
            return !0
        }
        if (this.targetElement !== this.getTargetElementFromEventTarget(e.target) || this.touchHasMoved(e)) {
            this.trackingClick = !1, this.targetElement = null
        }
        return !0
    };
    i.prototype.findControl = function (e) {
        return void 0 !== e.control ? e.control : e.htmlFor ? document.getElementById(e.htmlFor) : e.querySelector("button, input:not([type=hidden]), keygen, meter, output, progress, select, textarea")
    };
    i.prototype.onTouchEnd = function (f) {
        var e, k, g = this.targetElement;
        if (!this.trackingClick) {
            return !0
        }
        if (f.timeStamp - this.lastClickTime < this.tapDelay) {
            return this.cancelNextClick = !0
        }
        if (f.timeStamp - this.trackingClickStart > this.tapTimeout) {
            return !0
        }
        this.cancelNextClick = !1;
        this.lastClickTime = f.timeStamp;
        e = this.trackingClickStart;
        this.trackingClick = !1;
        this.trackingClickStart = 0;
        a && (k = f.changedTouches[0], g = document.elementFromPoint(k.pageX - window.pageXOffset, k.pageY - window.pageYOffset) || g, g.fastClickScrollParent = this.targetElement.fastClickScrollParent);
        k = g.tagName.toLowerCase();
        if ("label" === k) {
            if (e = this.findControl(g)) {
                this.focus(g);
                if (d) {
                    return !1
                }
                g = e
            }
        } else {
            if (this.needsFocus(g)) {
                if (100 < f.timeStamp - e || h && window.top !== window && "input" === k) {
                    return this.targetElement = null, !1
                }
                this.focus(g);
                this.sendClick(g, f);
                h && "select" === k || (this.targetElement = null, f.preventDefault());
                return !1
            }
        }
        if (h && !b && (e = g.fastClickScrollParent) && e.fastClickLastScrollTop !== e.scrollTop) {
            return !0
        }
        this.needsClick(g) || (f.preventDefault(), this.sendClick(g, f));
        return !1
    };
    i.prototype.onTouchCancel = function () {
        this.trackingClick = !1;
        this.targetElement = null
    };
    i.prototype.onMouse = function (e) {
        return this.targetElement && !e.forwardedTouchEvent && e.cancelable ? !this.needsClick(this.targetElement) || this.cancelNextClick ? (e.stopImmediatePropagation ? e.stopImmediatePropagation() : e.propagationStopped = !0, e.stopPropagation(), e.preventDefault(), !1) : !0 : !0
    };
    i.prototype.onClick = function (e) {
        if (this.trackingClick) {
            return this.targetElement = null, this.trackingClick = !1, !0
        }
        if ("submit" === e.target.type && 0 === e.detail) {
            return !0
        }
        e = this.onMouse(e);
        e || (this.targetElement = null);
        return e
    };
    i.prototype.destroy = function () {
        var e = this.layer;
        d && (e.removeEventListener("mouseover", this.onMouse, !0), e.removeEventListener("mousedown", this.onMouse, !0), e.removeEventListener("mouseup", this.onMouse, !0));
        e.removeEventListener("click", this.onClick, !0);
        e.removeEventListener("touchstart", this.onTouchStart, !1);
        e.removeEventListener("touchmove", this.onTouchMove, !1);
        e.removeEventListener("touchend", this.onTouchEnd, !1);
        e.removeEventListener("touchcancel", this.onTouchCancel, !1)
    };
    i.notNeeded = function (f) {
        var e, g;
        if ("undefined" === typeof window.ontouchstart) {
            return !0
        }
        if (g = +(/Chrome\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1]) {
            if (d) {
                if ((e = document.querySelector("meta[name=viewport]")) && (-1 !== e.content.indexOf("user-scalable=no") || 31 < g && document.documentElement.scrollWidth <= window.outerWidth)) {
                    return !0
                }
            } else {
                return !0
            }
        }
        return j && (e = navigator.userAgent.match(/Version\/([0-9]*)\.([0-9]*)/), 10 <= e[1] && 3 <= e[2] && (e = document.querySelector("meta[name=viewport]")) && (-1 !== e.content.indexOf("user-scalable=no") || document.documentElement.scrollWidth <= window.outerWidth)) || "none" === f.style.msTouchAction || "manipulation" === f.style.touchAction || 27 <= +(/Firefox\/([0-9]+)/.exec(navigator.userAgent) || [, 0])[1] && (e = document.querySelector("meta[name=viewport]")) && (-1 !== e.content.indexOf("user-scalable=no") || document.documentElement.scrollWidth <= window.outerWidth) ? !0 : "none" === f.style.touchAction || "manipulation" === f.style.touchAction ? !0 : !1
    };
    i.attach = function (f, e) {
        return new i(f, e)
    };
    "function" === typeof define && "object" === typeof define.amd && define.amd ? define(function () {
        return i
    }) : "undefined" !== typeof module && module.exports ? (module.exports = i.attach, module.exports.FastClick = i) : window.FastClick = i
})();
